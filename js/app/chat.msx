var wsCtrl = require('../ws/_wsCtrl.js');
var api = require('./api.msx');

var Chat = {
  controller: function(){
    var ctrl = this;
    m.redraw.strategy("diff");
    ctrl.showChatDock = true;
    ctrl.toggleChatDock = function(){
      ctrl.showChatDock = !ctrl.showChatDock;
    };
    ctrl.makechat = function(user) {
      rd.right(function(){
        var pos = wsCtrl.getPosChat(user);
        wsCtrl.data.chat[pos].display = true;
        wsCtrl.data.chat[pos].hide = false;
        api.focusById(wsCtrl.data.chat[pos].user.id);
        m.redraw()
      })
    };

    ctrl.toggleChat = function(num){
      wsCtrl.data.chat[num].hide = !wsCtrl.data.chat[num].hide;
    };

    ctrl.stopChat = function(num){
      wsCtrl.data.chat[num].display = false;
      wsCtrl.data.chat[num].input('');
    };

    ctrl.add = function (num) {
      var input = wsCtrl.data.chat[num].input().trim();
      //input = input.replace(/\n/g, '');
      if (input) {
        wsCtrl.send(wsCtrl.sendData("m", {to: wsCtrl.data.chat[num].user.id, mes: input}));

        //wsCtrl.data.chat[num].chat.push({f: "u0", mes: input});
        //wsCtrl.data.chat[num].chat.push({f: "u1", mes: "received: " + input});
      }
      wsCtrl.data.chat[num].input('');
    };

    ctrl.save = function(e) {
      if (e.keyCode == 13) {
        //this causes a redraw, since event handlers active auto-redrawing by default
        ctrl.add()
      }
      else {
        //we don't care about other keys, so don't redraw
        m.redraw.strategy("none")
      }
    };

  },
  view: function(ctrl){
    api.rd("right: " + redraw.right);
    //console.log("right");
    redraw.right++;
    console.log(ctrl.showChatDock)
    return (
        <div>
          {ctrl.showChatDock?(<div id="user-list">
            <div className="ui segment pad0">
            <div className="ui top attached inverted header chat-title"
                 onclick={function(){rd.right(ctrl.toggleChatDock())}}
            >Chat</div>
              {wsCtrl.data.userOnline.map(function(user){
                  return <div className="userOnline"
                              config={function(el){
                                  $(el).click(function(){
                                    if(wsCtrl.userId.length > 0 && wsCtrl.userId !== user.id) ctrl.makechat(user)
                                  });
                                }
                              }
                          >{user.name + ((wsCtrl.userId.length > 0 && wsCtrl.userId !== user.id)?"":" (you)")}</div>
                  })}
            <div className="ui search">
              <div className="ui left icon input">
                <input className="search-friend" type="text" placeholder="Search"/>
                  <i className="search icon"></i>
              </div>
            </div>
            </div>
          </div>):(<div id="user-list">
            <div className="ui top attached inverted header chat-title"
                 onclick={function(){rd.right(ctrl.toggleChatDock())}}
            >Chat</div>
          </div>)}
          <div id="dock-bot">
            {wsCtrl.data.chat.map(function(chat, rank){
                return (!chat.display)?"":(
                    <div className={"chatWr " + (chat.hide?"w2":"w1")}>
                      <div className={"ui top attached blue inverted header chat-title2" + (chat.read?"":" unread")}
                           style={!chat.hide?"display: none":""}
                           onclick={function(){rd.right(ctrl.toggleChat(rank))}}
                      >{chat.user.name}
                        <i className="remove icon close-chat"
                           onclick={function(){rd.right(ctrl.stopChat(rank))}}
                        ></i>
                      </div>

                      <div className="chatboxWr"
                           style={chat.hide?"display: none":""}> <div className="ui raised segment">
                          <div className={"ui top attached inverted header chat-title" + (chat.read?"":" unread")}
                               onclick={function(){rd.right(ctrl.toggleChat(rank))}}
                          >
                            {chat.user.name}
                            <i className="setting icon setting-chat"></i>
                            <i className="remove icon close-chat"
                               onclick={function(){rd.right(ctrl.stopChat(rank))}}
                            ></i>
                          </div>
                        <div className="ui form">
                          <div className="field">

                            <div className="chat-box"
                                 config={api.scrollBottom}
                                 onclick={local(['nav', 'right'],function(){api.markRead(rank)})}
                            >
                              {chat.chat.map(function(item, num){
                                  return <div>
                                    {chat.init?(<div className="loading_chat">"Loading previous ..."</div>):""}
                                    <div className={(item.f.id == wsCtrl.userId)?"comment-left": "comment-right"}>
                                      <div className="mes">{item.mes}</div>
                                    </div>
                                  </div>
                                  })}
                            </div>

                            <textarea className="auto-size new-comment" id={chat.user.id} rows="1"
                                      onfocus={function(){rd.right(function(){api.markRead(rank)})}}
                                      config={function (element, isInit, ctx) {
                                          if(!isInit) {
                                            $(element).textareaAutoSize();
                                            $(element).attrchange({
                                              //trackValues: true,
                                              callback: function (event) {
                                                var prev = element.previousSibling;
                                                var $prev = $(prev);
                                                if ($prev.scrollTop() + $prev.innerHeight() >= element.previousSibling.scrollHeight) {
                                                  $prev.css('height', 273 - $(element).outerHeight());
                                                  prev.scrollTop = prev.scrollHeight;
                                                } else {
                                                  $prev.css('height', 273 - $(element).outerHeight())
                                                }
                                              }
                                            });
                                          }
                                          element.value = wsCtrl.data.chat[rank].input();
                                          if(element.value.length<1){
                                            $(element).css('height', '30px')
                                          }
                                        }
                                      }
                                      onkeypress={function(e){
                                            if(e.keyCode == 13 && !e.shiftKey) {
                                              m.redraw.strategy("none");
                                              if(wsCtrl.data.chat[rank].input() != undefined) console.log(wsCtrl.data.chat[rank].input().length + "=====")
                                              if (wsCtrl.data.chat[rank].input().length < 1) {
                                                console.log("length < 1")
                                                return false;
                                              } else {
                                                var source = e.target || e.srcElement;
                                                var prev = source.previousSibling;
                                                prev.scrollTop = prev.scrollHeight;
                                                ctrl.add(rank);
                                                //$(source).val = '';
                                                return false;
                                              }
                                            }else{
                                              m.redraw.strategy("none");
                                              if(e.keyCode == 13 && e.shiftKey && wsCtrl.data.chat[rank].input().length < 1){
                                                return false;
                                              }
                                            }
                                        }
                                      }
                                      oninput={function(){rd.right(api.setsVal(wsCtrl.data.chat[rank].input))}}
                            >{}</textarea>
                          </div>
                        </div>
                      </div></div>
                    </div>
                    )
                })}
          </div>
        </div>
    )
  }
};

module.exports = Chat;
